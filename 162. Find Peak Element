A peak element is an element that is strictly greater than its neighbors.
Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.
You may imagine that nums[-1] = nums[n] = -âˆž. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.
You must write an algorithm that runs in O(log n) time.

Example 1:
Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.

int findPeakElement(vector<int>& nums) {
      int n=nums.size();
        int l=0,h=n-1;
        if(n==1)
            return 0;
        while(l<=h)
        {
          int mid=l+(h-l)/2;
            if(mid>0 && mid<n-1)
            if(nums[mid]>nums[mid-1]&&nums[mid]>nums[mid+1])
                return mid;
            else if(nums[mid]<nums[mid-1])
                               h=mid-1;
            else
             l=mid+1;
            
        else if(mid==0)
        {
            if(nums[0]>nums[1])
                return 0;
            else 
                return 1;
        }
      else if(mid==n-1)
        {
            if(nums[n-1]>nums[n-2])
                return n-1;
            else 
                return n-2;
        }
        }
        return 0;
    }
