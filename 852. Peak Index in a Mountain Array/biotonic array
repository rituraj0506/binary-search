An array arr a mountain if the following properties hold:
arr.length >= 3
There exists some i with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
Given a mountain array arr, return the index i such that arr[0] < arr[1] < ... < arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1].
You must solve it in O(log(arr.length)) time complexity.


int peakIndexInMountainArray(vector<int>& nums) {
        int n=nums.size();
        int l=0,h=n-1;
        while(l<=h)
        {
            int mid=l+(h-l)/2;
           if(mid>0&&mid<n-1)
           {
               if(nums[mid]>nums[mid-1]&&nums[mid]>nums[mid+1])
               {
                   return mid;
               }
               else if(nums[mid]<nums[mid+1])// [0,2,6,10,7]
                   l=mid+1;
               else
                   h=mid-1;
           }
            else if(mid==0)
            {
             if(nums[0]>nums[1])
                 return 0;
                else
                    return 1;
            }
            else if(mid==n-1)
            {
                if(nums[n-1]>nums[n-2])
                    return n-1;
                else
                    return n-2;
            }
            
        }
        return -1;
    }
