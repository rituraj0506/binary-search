Koko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas. The guards have gone and will come back in h hours.
Koko can decide her bananas-per-hour eating speed of k. Each hour, she chooses some pile of bananas and eats k bananas from that pile. If the pile has less than 
k bananas, she eats all of them instead and will not eat any more bananas during this hour.
Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return.
Return the minimum integer k such that she can eat all the bananas within h hours.

 Input: piles = [3,6,7,11], h = 8
Output: 4

soln :  find min speed of banana she can take in eat in ques 
let us start with min speed 1
for examp given if she eat with speed 1 then take 27 hr to finish them but guard come in 8 hr so she need to increase the speed
if she eat at the speed of 2 then [3,6,7,11] /* in ques  she eats all of them instead and will not eat any more bananas during this hour*/
  timetaken=2+3+4+6=15 hr means ceil value 
if she eat at the speed of 4 then eat will in 4hr
if she eat at the speed of 11 then eat will in 4hr /* 11 is maximum ele*/ so after 11 any spped take 4 hr

    long long caneat(vector<int>& piles, int mid)
    {
        long long timetaken=0;
        for(int i=0;i<piles.size();i++)
        timetaken+=(piles[i]%mid==0)?(piles[i]/mid):(piles[i]/mid)+1;
        return timetaken;
    }

  int minEatingSpeed(vector<int>& piles, int h) {
        long long low=1;/* becoz if we start spped 1 it take max hr */
        long long high=*max_element(piles.begin(),piles.end());/* we st from maxele take min hr to eat so it is the boundary of bs we search our ans in this boundary*/
        long long res=-1;
        while(low<=high)
        {
            long long mid=low+(high-low)/2;
            long long time=caneat(piles,mid);
            if(time<=h)
            {
                res=mid;
                high=mid-1;
            }
            else
                low=mid+1;
        }
        return res;   
    }
